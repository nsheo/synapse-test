{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "작업 영역 이름",
			"defaultValue": "asaworkspace04"
		},
		"asadatalake04_accountKey": {
			"type": "secureString",
			"metadata": "'asadatalake04'의 'accountKey'에 대한 보안 문자열"
		},
		"asastore04_connectionString": {
			"type": "secureString",
			"metadata": "'asastore04'의 'connectionString'에 대한 보안 문자열"
		},
		"asaworkspace04-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "'asaworkspace04-WorkspaceDefaultSqlServer'의 'connectionString'에 대한 보안 문자열"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "'sqlpool01'의 'connectionString'에 대한 보안 문자열"
		},
		"sqlpool01_workload01_connectionString": {
			"type": "secureString",
			"metadata": "'sqlpool01_workload01'의 'connectionString'에 대한 보안 문자열"
		},
		"sqlpool01_workload02_connectionString": {
			"type": "secureString",
			"metadata": "'sqlpool01_workload02'의 'connectionString'에 대한 보안 문자열"
		},
		"asadatalake04_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake04.dfs.core.windows.net"
		},
		"asakeyvault04_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvault04.vault.azure.net/"
		},
		"asaworkspace04-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake04.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW - Exercise 2 - Copy Campaign Analytics Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "test",
				"activities": [
					{
						"name": "Copy Campaign Analytics Data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "2.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ASAMCW_Exercise_2_Campaign_Analytics_Data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"campaignanalyticscsv": {},
									"campaignanlyticsasa": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "asastore04",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/campaign"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/ASAMCW_Exercise_2_Campaign_Analytics_Data')]",
				"[concat(variables('workspaceId'), '/linkedServices/asastore04')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW - Exercise 2 - Copy Product Information')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Product Information",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "truncate table wwi_mcw.Product",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "asastore04",
									"type": "LinkedServiceReference"
								},
								"path": "staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "ProductId",
											"type": "Int16"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "Seasonality",
											"type": "Byte"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "Price",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "Profit",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "asamcw_product_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asamcw_product_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-04-16T04:56:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asamcw_product_csv')]",
				"[concat(variables('workspaceId'), '/datasets/asamcw_product_asa')]",
				"[concat(variables('workspaceId'), '/linkedServices/asastore04')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW - Exercise 8 - ExecuteBusinessAnalystQueries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,10)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi_mcw.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "asamcw_wwi_salesmall_workload2_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-04-16T04:56:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asamcw_wwi_salesmall_workload2_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW - Exercise 8 - ExecuteDataAnalystAndCEOQueries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CEO",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 1 for CEO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi_mcw.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "asamcw_wwi_salesmall_workload1_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi_mcw.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "asamcw_wwi_salesmall_workload2_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-04-16T04:56:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asamcw_wwi_salesmall_workload1_asa')]",
				"[concat(variables('workspaceId'), '/datasets/asamcw_wwi_salesmall_workload2_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW_Exercise_2_2018_and_2019_Sales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ASAMCW_Exercise_2_2018_and_2019_Sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "3.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ASAMCW_Exercise_2_2018_and_2019_Sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"salesdata": {},
									"sale": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "asastore04",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/test"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-04-20T01:03:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/ASAMCW_Exercise_2_2018_and_2019_Sales')]",
				"[concat(variables('workspaceId'), '/linkedServices/asastore04')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_campaignanalytics_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "ㅅㄷ",
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "CampaignName",
						"type": "nvarchar"
					},
					{
						"name": "Analyst",
						"type": "nvarchar"
					},
					{
						"name": "Revenue",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "RevenueTarget",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "wwi_mcw",
					"table": "CampaignAnalytics"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_campaignanalytics_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "test",
				"linkedServiceName": {
					"referenceName": "asaworkspace04-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "campaignanalytics.csv",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asaworkspace04-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_product_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Seasonality",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					},
					{
						"name": "Profit",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "wwi_mcw",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_product_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalake04",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "generator-product.csv",
						"folderPath": "data-generators/generator-product",
						"container": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake04')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_sale_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi_mcw",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_sales_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asaworkspace04-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sale-small",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "gzip"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "Quarter",
						"type": "UTF8"
					},
					{
						"name": "Month",
						"type": "UTF8"
					},
					{
						"name": "Day",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asaworkspace04-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_wwi_salesmall_workload1_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_workload01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi_mcw",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_workload01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asamcw_wwi_salesmall_workload2_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_workload02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi_mcw",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_workload02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalake04')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalake04_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalake04_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvault04')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvault04_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastore04')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastore04_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace04-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspace04-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace04-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspace04-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault04",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault04')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault04",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault04')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload02')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload02_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault04",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault04')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW_Exercise_2_2018_and_2019_Sales')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asamcw_sales_parquet",
								"type": "DatasetReference"
							},
							"name": "salesdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asamcw_sale_asa",
								"type": "DatasetReference"
							},
							"name": "sale"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tTransactionId as string,\n\t\tCustomerId as integer,\n\t\tProductId as short,\n\t\tQuantity as byte,\n\t\tPrice as decimal(38,18),\n\t\tTotalAmount as decimal(38,18),\n\t\tTransactionDate as integer,\n\t\tProfitAmount as decimal(38,18),\n\t\tHour as byte,\n\t\tMinute as byte,\n\t\tStoreId as short,\n\t\tYear as string,\n\t\tQuarter as string,\n\t\tMonth as string,\n\t\tDay as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sale-small/Year=2018/*/*/*/*','sale-small/Year=2019/*/*/*/*'],\n\tpartitionBy('hash', 50,\n\t\tTransactionDate\n\t)) ~> salesdata\nsalesdata sink(input(\n\t\tTransactionId as string,\n\t\tCustomerId as integer,\n\t\tProductId as integer,\n\t\tQuantity as integer,\n\t\tPrice as decimal(9,2),\n\t\tTotalAmount as decimal(9,2),\n\t\tTransactionDateId as integer,\n\t\tProfitAmount as decimal(9,2),\n\t\tHour as integer,\n\t\tMinute as integer,\n\t\tStoreId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tTransactionId,\n\t\tCustomerId,\n\t\tProductId,\n\t\tQuantity,\n\t\tPrice,\n\t\tTotalAmount,\n\t\tTransactionDateId = TransactionDate,\n\t\tProfitAmount,\n\t\tHour,\n\t\tMinute,\n\t\tStoreId\n\t),\n\tpartitionBy('hash', 50,\n\t\tTransactionDateId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sale"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asamcw_sales_parquet')]",
				"[concat(variables('workspaceId'), '/datasets/asamcw_sale_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW_Exercise_2_Campaign_Analytics_Data')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "test",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asamcw_campaignanalytics_csv",
								"type": "DatasetReference"
							},
							"name": "campaignanalyticscsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asamcw_campaignanalytics_asa",
								"type": "DatasetReference"
							},
							"name": "campaignanlyticsasa"
						}
					],
					"transformations": [
						{
							"name": "mapcampaignanalytics"
						},
						{
							"name": "convertandaddcolumns"
						},
						{
							"name": "selectcampaignanalyticscolumns"
						}
					],
					"script": "source(output(\n\t\t{_col0_} as string,\n\t\t{_col1_} as string,\n\t\t{_col2_} as string,\n\t\t{_col3_} as string,\n\t\t{_col4_} as string,\n\t\t{_col5_} as double,\n\t\t{_col6_} as string,\n\t\t{_col7_} as double,\n\t\t{_col8_} as string,\n\t\t{_col9_} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> campaignanalyticscsv\ncampaignanalyticscsv select(mapColumn(\n\t\tRegion = {_col0_},\n\t\tCountry = {_col1_},\n\t\tProductCategory = {_col2_},\n\t\tCampaignName = {_col3_},\n\t\tRevenuePart1 = {_col4_},\n\t\tRevenue = {_col5_},\n\t\tRevenueTargetPart1 = {_col6_},\n\t\tRevenueTarget = {_col7_},\n\t\tCity = {_col8_},\n\t\tState = {_col9_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> mapcampaignanalytics\nmapcampaignanalytics derive(Revenue = toDecimal(replace(concat(toString(RevenuePart1), toString(Revenue)), '\\\\', ''), 10, 2, '$###,###.##'),\n\t\tRevenueTarget = toDecimal(replace(concat(toString(RevenueTargetPart1), toString(RevenueTarget)), '\\\\', ''), 10, 2, '$###,###.##'),\n\t\tAnalyst = iif(isNull(City), '', replace('DataAnalyst'+ City,' ',''))) ~> convertandaddcolumns\nconvertandaddcolumns select(mapColumn(\n\t\tRegion,\n\t\tCountry,\n\t\tProductCategory,\n\t\tCampaignName,\n\t\tRevenue,\n\t\tRevenueTarget,\n\t\tCity,\n\t\tState,\n\t\tAnalyst\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectcampaignanalyticscolumns\nselectcampaignanalyticscolumns sink(input(\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tProductCategory as string,\n\t\tCampaignName as string,\n\t\tAnalyst as string,\n\t\tRevenue as decimal(10,2),\n\t\tRevenueTarget as decimal(10,2),\n\t\tCity as string,\n\t\tState as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> campaignanlyticsasa"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asamcw_campaignanalytics_csv')]",
				"[concat(variables('workspaceId'), '/datasets/asamcw_campaignanalytics_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Grant User')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE USER [nsheo@ntels.com] FROM EXTERNAL PROVIDER;\nCREATE USER [dakeshi@ntels.com] FROM EXTERNAL PROVIDER;\n\nEXEC sp_addrolemember 'db_owner', 'dakeshi@ntels.com';\nEXEC sp_addrolemember 'db_exporter',[dakeshi@ntels.com];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Make CampaignAnalystics')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [wwi_mcw].[CampaignAnalytics]\n(\n    [Region] [nvarchar](50)  NULL,\n    [Country] [nvarchar](30)  NOT NULL,\n    [ProductCategory] [nvarchar](50)  NOT NULL,\n    [CampaignName] [nvarchar](500)  NOT NULL,\n    [Analyst] [nvarchar](25) NULL,\n    [Revenue] [decimal](10,2)  NULL,\n    [RevenueTarget] [decimal](10,2)  NULL,\n    [City] [nvarchar](50)  NULL,\n    [State] [nvarchar](25)  NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [Region] ),\n    CLUSTERED COLUMNSTORE INDEX\n);  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPool01",
						"databaseName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Make SaleSmall Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nCREATE TABLE [wwi_mcw].[SaleSmall]\n  (\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [tinyint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDateId] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n  )\n  WITH\n  (\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX,\n    PARTITION\n    (\n      [TransactionDateId] RANGE RIGHT FOR VALUES (\n        20180101, 20180201, 20180301, 20180401, 20180501, 20180601, 20180701, 20180801, 20180901, 20181001, 20181101, 20181201,\n        20190101, 20190201, 20190301, 20190401, 20190501, 20190601, 20190701, 20190801, 20190901, 20191001, 20191101, 20191201)\n    )\n  );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPool01",
						"databaseName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Example')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP TABLE [wwi_mcw].[SaleSmall];\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPool01",
						"databaseName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Select CSV')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n   csv.*\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalake0413.dfs.core.windows.net/wwi-02/data-generators/generator-product/generator-product.csv',\n        FORMAT='CSV',\n        FIRSTROW = 1\n    ) WITH (\n        ProductID INT,\n        Seasonality INT,\n        Price DECIMAL(10,2),\n        Profit DECIMAL(10,2)\n    ) as csv\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Select Json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    products.*\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalake0413.dfs.core.windows.net/wwi-02/product-json/json-data/*.json',\n        FORMAT='CSV',\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent NVARCHAR(200)\n    ) AS [raw]\nCROSS APPLY OPENJSON(jsonContent)\nWITH (\n    ProductId INT,\n    Seasonality INT,\n    Price DECIMAL(10,2),\n    Profit DECIMAL(10,2)\n) AS products",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "master"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAMCW - Exercise 7 - Machine Learning')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2a06e23-0517-43c4-8fe0-43d39d85749a/resourceGroups/Synapse-MCW/providers/Microsoft.Synapse/workspaces/asaworkspace04/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace04.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Train a classifier to determine product seasonality\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"First, check if XGBoost is properly installed in the Spark environment (should have version 1.0.2)\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"Import all necessary libraries.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\n",
							"from sklearn.decomposition import PCA\n",
							"from sklearn.model_selection import train_test_split\n",
							"from sklearn.metrics import accuracy_score\n",
							"from sklearn.externals import joblib\n",
							"\n",
							"from xgboost import XGBClassifier\n",
							"\n",
							"from onnxmltools.convert import convert_xgboost\n",
							"from onnxmltools.convert.common.data_types import FloatTensorType\n",
							"\n",
							"import numpy as np\n",
							"import pandas as pd\n",
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from azureml.core.experiment import Experiment\n",
							"from azureml.core.workspace import Workspace\n",
							"from azureml.train.automl.run import AutoMLRun\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.automl.runtime.onnx_convert import OnnxConverter\n",
							"from azureml.core.model import Model\n",
							"from azureml.core import Environment\n",
							"from azureml.core.model import InferenceConfig\n",
							"from azureml.core.webservice import AciWebservice\n",
							"from azureml.core.webservice import Webservice"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory data analysis (basic stats)\n",
							"\n",
							"Create Spark temporary views for sales and products."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							},
							"diagram": {
								"activateDiagramType": 2,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Seasonality"
									],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "Seasonality",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"ProductId\":{\"1\":1522591,\"2\":432381,\"3\":544109}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.read.sqlanalytics(\"SQLPool01.wwi_mcw.SaleSmall\") \n",
							"df.createOrReplaceTempView(\"sale\")\n",
							"\n",
							"val df2 = spark.read.sqlanalytics(\"SQLPool01.wwi_mcw.Product\") \n",
							"df2.createOrReplaceTempView(\"product\")\n",
							"display(df2)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"Load daily product sales from the SQL pool.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"sqlQuery = \"\"\"\n",
							"SELECT\n",
							"    P.ProductId\n",
							"    ,P.Seasonality\n",
							"    ,S.TransactionDateId\n",
							"    ,COUNT(*) as TransactionItemsCount\n",
							"FROM\n",
							"    sale S\n",
							"    JOIN product P ON\n",
							"        S.ProductId = P.ProductId\n",
							"GROUP BY\n",
							"    P.ProductId\n",
							"    ,P.Seasonality\n",
							"    ,S.TransactionDateId\n",
							"\"\"\"\n",
							"\n",
							"prod_df = spark.sql(sqlQuery)\n",
							"prod_df.cache()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"Check the number of records in the data frame (should be around 2.6 million rows)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_df.count()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display some statistics about the data frame.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"summary"
									],
									"values": [
										"summary"
									],
									"yLabel": "summary",
									"xLabel": "summary",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"summary\":{\"count\":1,\"max\":1,\"mean\":1,\"min\":1,\"stddev\":1}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"display(prod_df.describe())"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"Pivot the data frame to make daily sale items counts columns. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_prep_df = prod_df.groupBy(['ProductId', 'Seasonality']).pivot('TransactionDateId').sum('TransactionItemsCount').toPandas()"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"Clean up the nulls and take a look at the result.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_prep_df = prod_prep_df.fillna(0)\n",
							"prod_prep_df.head(10)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"Isolate features and prediction classes.\n",
							"\n",
							"Standardize features by removing the mean and scaling to unit variance.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"X = prod_prep_df.iloc[:, 2:].values\n",
							"y = prod_prep_df['Seasonality'].values\n",
							"\n",
							"X_scale = StandardScaler().fit_transform(X)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Use PCA for dimensionality reduction\n",
							"\n",
							"Perform dimensionality reduction using Principal Components Analysis and two target components.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"pca = PCA(n_components=2)\n",
							"principal_components = pca.fit_transform(X_scale)\n",
							"principal_components = MinMaxScaler().fit_transform(principal_components)\n",
							"\n",
							"pca_df = pd.DataFrame(data = principal_components, columns = ['pc1', 'pc2'])\n",
							"pca_df = pd.concat([pca_df, prod_prep_df[['Seasonality']]], axis = 1)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display the products data frame in two dimensions (mapped to the two principal components).\n",
							"\n",
							"Note the clear separation of clusters.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"fig = plt.figure(figsize = (6,6))\n",
							"ax = fig.add_subplot(1,1,1) \n",
							"ax.set_xlabel('Principal Component 1', fontsize = 15)\n",
							"ax.set_ylabel('Principal Component 2', fontsize = 15)\n",
							"ax.set_title('2 component PCA', fontsize = 20)\n",
							"targets = [1, 2, 3]\n",
							"colors = ['r', 'g', 'b']\n",
							"for target, color in zip(targets,colors):\n",
							"    indicesToKeep = pca_df['Seasonality'] == target\n",
							"    ax.scatter(pca_df.loc[indicesToKeep, 'pc1']\n",
							"               , pca_df.loc[indicesToKeep, 'pc2']\n",
							"               , c = color\n",
							"               , s = 1)\n",
							"ax.legend(['All Season Products', 'Summer Products', 'Winter Products'])\n",
							"ax.plot([-0.05, 1.05], [0.77, 1.0], linestyle=':', linewidth=1, color='y')\n",
							"ax.plot([-0.05, 1.05], [0.37, 0.6], linestyle=':', linewidth=1, color='y')\n",
							"ax.grid()\n",
							"\n",
							"plt.show()\n",
							"plt.close()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"Redo the Principal Components Analysis, this time with twenty dimensions.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"def col_name(x):\n",
							"    return f'f{x:02}'\n",
							"\n",
							"pca = PCA(n_components=20)\n",
							"principal_components = pca.fit_transform(X_scale)\n",
							"principal_components = MinMaxScaler().fit_transform(principal_components)\n",
							"\n",
							"X = pd.DataFrame(data = principal_components, columns = list(map(col_name, np.arange(0, 20))))\n",
							"pca_df = pd.concat([X, prod_prep_df[['ProductId']]], axis = 1)\n",
							"pca_automl_df = pd.concat([X, prod_prep_df[['Seasonality']]], axis = 1)\n",
							"\n",
							"X = X[:4500]\n",
							"y = prod_prep_df['Seasonality'][:4500]\n",
							"pca_automl_df = pca_automl_df[:4500]"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"Save the PCA components to the SQL pool (you may ignore any warnings).\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"pca_sdf = spark.createDataFrame(pca_df)\n",
							"pca_sdf.createOrReplaceTempView(\"productpca\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.sqlContext.sql(\"select * from productpca\")\n",
							"df.write.sqlanalytics(\"SQLPool01.wwi_mcw.ProductPCA\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train ensemble of trees classifier (using XGBoost)\n",
							"\n",
							"Split into test and training data sets.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=123)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"Train the ensemble classifier using XGBoost.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"model = XGBClassifier()\n",
							"model.fit(X_train, y_train)"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"Perform predictions with the newly trained model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"y_pred = model.predict(X_test)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"source": [
							"Calculate the accuracy of the model using test data.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"accuracy = accuracy_score(y_test, y_pred)\n",
							"print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"source": [
							"Convert trained model to ONNX format.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"initial_types = [\n",
							"    ('input', FloatTensorType([1, 20]))\n",
							"]\n",
							"\n",
							"onnx_model = convert_xgboost(model, initial_types=initial_types)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train classifier using Auto ML\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"Configure the connection to the Azure Machine Learning workspace. The Azure portal provides all the values below.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id= 'e2a06e23-0517-43c4-8fe0-43d39d85749a'\n",
							"resource_group= 'Synapse-MCW'\n",
							"workspace_name= 'amlworkspace04'\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"ws.write_config()\n",
							"\n",
							"experiment = Experiment(ws, \"ASAMCW_Product_Seasonality\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"source": [
							"Configure the Automated Machine Learning experiment and start it (will run on local compute resources).\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"automl_classifier_config = AutoMLConfig(\n",
							"        task='classification',        \n",
							"        experiment_timeout_minutes=15,\n",
							"        enable_onnx_compatible_models=True,\n",
							"        training_data=pca_automl_df,\n",
							"        label_column_name='Seasonality',\n",
							"        n_cross_validations=5,\n",
							"        enable_voting_ensemble=False,\n",
							"        enable_stack_ensemble=False\n",
							"        )\n",
							"\n",
							"local_run = experiment.submit(automl_classifier_config, show_output=True)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"source": [
							"Retrieve and persist the best model\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"best_run, fitted_model = local_run.get_output()\n",
							"model_path = 'product_seasonality.pkl'\n",
							"joblib.dump(fitted_model, model_path)"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Operationalize\n",
							"Operationalization means getting the model into the cloud so that others can run it after you close the notebook. We will create a docker container running on Azure Container Instances (ACI) to host our model.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Register the model\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"model_name = \"ProductSeasonalityClassifier\"\n",
							"registered_model = Model.register(model_path = model_path, # this points to a local file\n",
							"                       model_name = model_name, # name the model is registered as\n",
							"                       tags = {'type': \"classification\"}, \n",
							"                       description = \"Product Seasonality Classifier\", \n",
							"                       workspace = ws)"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Develop the scoring script\n",
							"For deployment, we need a function that will exercise the model with a sampling of data. This has been created for us and is available as part of the model's output artifacts.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"scoring_script = \"\"\"\n",
							"import json\n",
							"import pickle\n",
							"import numpy as np\n",
							"import pandas as pd\n",
							"import azureml.train.automl\n",
							"from sklearn.externals import joblib\n",
							"from azureml.core.model import Model\n",
							"\n",
							"def init():\n",
							"    global model\n",
							"    # This name is model.id of model that we want to deploy deserialize the model file back\n",
							"    # into a sklearn model\n",
							"    model_path = Model.get_model_path(model_name = 'ProductSeasonalityClassifier')\n",
							"    model = joblib.load(model_path)\n",
							"\n",
							"def run(input_json):     \n",
							"    try:\n",
							"        data_df = pd.read_json(input_json)       \n",
							"        # Get the predictions...\n",
							"        prediction = model.predict(data_df)\n",
							"        prediction = json.dumps(prediction.tolist())\n",
							"    except Exception as e:\n",
							"        prediction = str(e)\n",
							"    return prediction\n",
							"\"\"\"\n",
							"exec(scoring_script)\n",
							"with open(\"scoring_script.py\", \"w\") as file:\n",
							"    file.write(scoring_script)\n",
							"    \n",
							"scoring_script_file_name = 'scoring_script.py'"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"source": [
							"#test locally\n",
							"json_test_data = X_test.to_json()\n",
							"init()\n",
							"run(json_test_data)"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Deploy the model as a Web Service on Azure Container Instances (ACI)\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# obtain conda dependencies from the automl run and save the file locally\n",
							"environment_config_file = 'conda_env.yml'\n",
							"best_run.download_file('outputs/conda_env_v_1_0_0.yml', environment_config_file)\n",
							"with open('conda_env.yml', 'r') as f:\n",
							"    print(f.read())\n",
							"\n",
							"# create the environment based on the saved conda dependencies file\n",
							"myenv = Environment.from_conda_specification(name=\"myenv\", file_path=environment_config_file)\n",
							"myenv.register(workspace=ws)"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"source": [
							"# Configure and deploy the web service to Azure Container Instances\n",
							"inference_config = InferenceConfig(environment=myenv, entry_script=scoring_script_file_name)\n",
							"aci_config = AciWebservice.deploy_configuration(cpu_cores = 1, memory_gb= 2, tags = { 'type' : 'automl-classification'}, description='AutoML Product Seasonality Classifier Service')\n",
							"aci_service_name = 'automl-product-classifier-01'\n",
							"aci_service = Model.deploy(ws, aci_service_name, [registered_model], inference_config, aci_config)\n",
							"aci_service.wait_for_deployment(show_output = True)\n",
							"print(aci_service.state)"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Call the Web Service\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"aci_service.run(json_test_data)"
						],
						"outputs": [],
						"execution_count": 28
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NTCTaxi Data road')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"//SQL분석 함수 통해 SQLPool01 데이터 조회(scala로만 불러오기 가능)\n",
							"val scaladf = spark.read.sqlanalytics(\"SQLPool01.dbo.Trip\") \n",
							"//세션내부에서 사용가능하도록 temp table 생성\n",
							"scaladf.createOrReplaceTempView(\"nycTaxi\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\n",
							"dfPy = spark.sql(\"SELECT * FROM nycTaxi\") "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\n",
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\n",
							"dfPy.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.trip\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"inputCollapsed": true,
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"SumTripDistance"
									],
									"values": [
										"PassengerCount"
									],
									"yLabel": "PassengerCount",
									"xLabel": "SumTripDistance",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"PassengerCount\":{\"12544348.589990655\":1,\"13091570.279999683\":3,\"172174.32999999798\":4,\"2635668.6600008374\":2,\"296384.39000000234\":6,\"3.6\":8,\"484437.6800000045\":5}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql \n",
							"SELECT PassengerCount,\n",
							"    SUM(TripDistanceMiles) as SumTripDistance,\n",
							"    AVG(TripDistanceMiles) as AvgTripDistance\n",
							"FROM nyctaxi.trip\n",
							"WHERE TripDistanceMiles > 0 AND PassengerCount > 0\n",
							"GROUP BY PassengerCount\n",
							"ORDER BY PassengerCount"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"\"\"\n",
							"   SELECT PassengerCount,\n",
							"       SUM(TripDistanceMiles) as SumTripDistance,\n",
							"       AVG(TripDistanceMiles) as AvgTripDistance\n",
							"   FROM nyctaxi.trip\n",
							"   WHERE TripDistanceMiles > 0 AND PassengerCount > 0\n",
							"   GROUP BY PassengerCount\n",
							"   ORDER BY PassengerCount\n",
							"\"\"\") \n",
							"#display(df)\n",
							"df.write.saveAsTable(\"nyctaxi.passengercountstats\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Raw Paruqet on Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake0413.dfs.core.windows.net/sale-small/Year=2010/Quarter=Q4/Month=12/Day=20101231/sale-small-20101231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\", \"ProductId\")\n",
							".agg(\n",
							"round(sum(\"ProfitAmount\"),2).alias(\"(sum)Profit\"),\n",
							"round(avg(\"ProfitAmount\"),2).alias(\"(avg)Profit\"),\n",
							"sum(\"Quantity\").alias(\"(sum)Quantity\")\n",
							").orderBy(\"TransactionDate\", \"ProductId\")\n",
							")\n",
							"profitByDateProduct.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Read SQL')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"## SQLPool 데이터 불러오기(scala)\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"//SQL분석 함수 통해 SQLPool01 데이터 조회(scala로만 불러오기 가능)\n",
							"val scaladf = spark.read.sqlanalytics(\"SQLPool01.wwi_mcw.Product\") \n",
							"//세션내부에서 사용가능하도록 temp table 생성\n",
							"scaladf.createOrReplaceTempView(\"wwiProduct\")\n",
							"//df.write.mode(\"overwrite\").saveAsTable(\"default.wwiProduct\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## SQL 조회\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"outputCollapsed": true,
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Price"
									],
									"values": [
										"Seasonality"
									],
									"yLabel": "Seasonality",
									"xLabel": "Price",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"Seasonality\":{\"22.05\":3,\"26.51\":1,\"27.27\":2,\"27.33\":3,\"28.29\":1,\"29.89\":2,\"30.09\":2,\"31.55\":1,\"31.64\":1,\"41.96\":1}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"SELECT * FROM wwiProduct LIMIT 10"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Pyspark로 임시테이블 조회/Dataframe로딩\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"outputCollapsed": true,
							"microsoft": {
								"language": "python"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Seasonality"
									],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "Seasonality",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"ProductId\":{\"1\":12,\"2\":21,\"3\":22}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"SELECT * FROM wwiProduct\") \n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Spark Test')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"bigDataPool": {
					"referenceName": "SparkPool02",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2a06e23-0517-43c4-8fe0-43d39d85749a/resourceGroups/Synapse-MCW/providers/Microsoft.Synapse/workspaces/asaworkspace04/bigDataPools/SparkPool02",
						"name": "SparkPool02",
						"type": "Spark",
						"endpoint": "https://asaworkspace04.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool02",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake04.dfs.core.windows.net/sale-small/Year=201[8-9]/Quarter=*/Month=*/Day=*/sale-small-*-snappy.parquet', format='parquet')\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS wwi\")\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"wwi.SaleSmall\")"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkToSQLPool Test')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e2a06e23-0517-43c4-8fe0-43d39d85749a/resourceGroups/Synapse-MCW/providers/Microsoft.Synapse/workspaces/asaworkspace04/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace04.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake04.dfs.core.windows.net/sale-small/Year=2018/Quarter=*/Month=*/Day=*/sale-small-*-snappy.parquet', format='parquet')\n",
							"df.count()\n",
							"df.createOrReplaceTempView(\"SaleSmallTemp\")\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"val scala_df = spark.sqlContext.sql(\"\"\"\n",
							"  select \n",
							"    TransactionId, \n",
							"    CustomerId, \n",
							"    ProductId, \n",
							"    cast(Quantity as int) Quantity, \n",
							"    Price, \n",
							"    TotalAmount, \n",
							"    TransactionDate as TransactionDateId, \n",
							"    ProfitAmount, \n",
							"    cast(Hour as int) Hour, \n",
							"    cast(Minute as int) Minute, \n",
							"    StoreId \n",
							"   from SaleSmallTemp\n",
							"\"\"\")\n",
							"scala_df.write.synapsesql(\"SQLPool01.wwi_mcw.SaleSmall\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"val checkDf = spark.read.sqlanalytics(\"SQLPool01.wwi_mcw.SaleSmall\") \n",
							"checkDf.count"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "koreacentral"
		}
	]
}